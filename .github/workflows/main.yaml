name: CI/CD orgnote client

on: [push, pull_request]

env:
  API_URL: ${{ vars.API_URL }}

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    outputs:
      node_modules_cache: ${{ steps.cache_node_modules.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  check_commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: webiny/action-conventional-commits@v1.3.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          allowed-commit-types: 'feat,fix,chore,release,refactor'

  lint:
    name: Run linters
    runs-on: ubuntu-latest
    needs: [install_dependencies]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}
      - name: Run linters
        run: bun run lint

  code-quality:
    name: Check code quality
    runs-on: ubuntu-latest
    needs: [install_dependencies]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}

      - name: Run duplicates check
        run: bun run report:duplicates

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: [install_dependencies]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}

      - name: Run tests
        run: bun test

  build-pwa:
    name: Build pwa
    needs: [tests, lint, code-quality, check_commit, install_dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Create empty env
        run: |
          cat <<EOT > .env.prod
          DEUBG=true
          API_URL=${{ secrets.API_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          EOT
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}

      - name: Build pwa
        run: bun run build:pwa

  build-mobile:
    name: Build mobile
    needs: [tests, lint, code-quality, check_commit, install_dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}
      - name: Create empty env
        run: |
          cat <<EOT > .env.prod
          DEUBG=true
          API_URL=${{ secrets.API_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          EOT
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: Build android
        run: bun run build:android

  build-ssr:
    name: Build ssr
    needs: [tests, lint, code-quality, check_commit, install_dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Create empty env
        run: |
          cat <<EOT > .env.prod
          DEUBG=true
          API_URL=${{ secrets.API_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          EOT
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}
      - name: Build android
        run: bun run build:ssr

  build-electron:
    name: Build electron
    needs: [tests, lint, code-quality, check_commit, install_dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Create empty env
        run: |
          cat <<EOT > .env.prod
          DEUBG=true
          API_URL=${{ secrets.API_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          EOT
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lockb') }}
      - name: Build android
        run: bun run build:ssr

  push_client_image:
    name: Push client image
    runs-on: ubuntu-latest
    needs: [tests, lint, code-quality, check_commit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: deploy
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          bun add global @quasar/cli
      - name: Init environment
        run: |
          cat <<EOT > .env.prod
          DEUBG=true
          API_URL=${{ secrets.API_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          EOT
      - name: Build ssr
        run: bun run build -m ssr
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Override capacitor dependency
        uses: sergeysova/jq-action@v2
        id: keywords
        with:
          cmd: 'jq ''. + {overrides: {"capacitor-folder-picker": {"@capacitor/core": "6.1.0"}}}'' ./dist/ssr/package.json > ./dist/ssr/tmp.json && mv -f ./dist/ssr/tmp.json ./dist/ssr/package.json'
          multiline: true
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.ssr
          push: true
          tags: orgnote/client:latest
      - name: Print env
        run: printenv

  trigger_backend:
    runs-on: ubuntu-latest
    needs: [push_client_image]
    steps:
      - name: Trigger second repo workflow
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.PAT }}" \
          https://api.github.com/repos/artawower/orgnote-backend/dispatches \
          -d '{"event_type":"trigger-deploy-repo-workflow"}'

  release:
    name: Create release
    needs: [push_client_image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get latest release tag
        id: get_latest_tag
        run: echo "::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)"

      - name: Read version from package.json
        id: read_version
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Compare versions
        id: compare_versions
        run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.tag }}
          PACKAGE_VERSION=${{ steps.read_version.outputs.version }}

          if [ "$(printf '%s\n' "$PACKAGE_VERSION" "$LATEST_TAG" | sort -V | head -n1)" != "$PACKAGE_VERSION" ]; then
            echo "Package version ($PACKAGE_VERSION) is greater than latest release tag ($LATEST_TAG)."
            echo "::set-output name=is-new-version::true"
          else
            echo "Package version ($PACKAGE_VERSION) is not greater than latest release tag ($LATEST_TAG)."
          fi
      - name: Release
        if: ${{ steps.compare_versions.outputs.is-new-version == 'true' }}
        uses: justincy/github-action-npm-release@2.0.2
        id: release
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Print release output
        if: ${{ steps.release.outputs.released == 'true' }}
        run: echo Release ID ${{ steps.release.outputs.release_id }}
