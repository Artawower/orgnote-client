import{a5 as V,z as v,o as c,A as P,a6 as C,h as G,l as T,r as B,s as M,a7 as F,a8 as k,e as g,N as K,B as A,F as o,Q as _,a9 as q,H as O,aa as Q,ab as U,K as d,a3 as w,ac as D,M as j,T as H,E as b,G as Y}from"./index-BVsaSLwH.js";import{N as z}from"./NavigationPage-CejflQFe.js";import{b as R}from"./config-menu-builder-B24crtS3.js";async function J(a){const{privateKey:n,publicKey:t}=await V({type:"ecc",curve:"curve25519",userIDs:[{name:a.username,email:a.email}],passphrase:a.passphrase,format:"armored"});return{privateKey:n,publicKey:t}}const L={},W={class:"simple-block"};function X(a,n){return c(),P("div",W,[C(a.$slots,"default",{},void 0,!0)])}const Z=v(L,[["render",X],["__scopeId","data-v-0c5f9a2c"],["__file","TheBlock.vue"]]),$=G({__name:"EncryptionKeysForm",setup(a,{expose:n}){n();const t=T(),e=B({username:t.user.nickName,email:t.user.email}),{config:s}=M(),i=F(),r=k(),y=async()=>{await i.confirm("generate new GPG keys","are you sure you want to generate new GPG keys? Your old keys will be lost.")&&await l(),r.close()},l=async()=>{const{privateKey:u,publicKey:f}=await J({username:e.value.username,email:e.value.email,passphrase:e.value.passphrase});s.encryption.type="gpgKeys",s.encryption.publicKey=f,s.encryption.privateKey=u},p={authStore:t,params:e,config:s,confirmationModalStore:i,modalStore:r,generateNewGpgKeys:y,createNewGpgKeys:l,TheBlock:Z};return Object.defineProperty(p,"__isScriptSetup",{enumerable:!1,value:!0}),p}});function ee(a,n,t,e,s,i){return c(),g(e.TheBlock,null,{default:K(()=>[A("form",null,[o(_,{class:"fg-main q-mt-md",standout:"bg-main",type:"text",modelValue:e.params.username,"onUpdate:modelValue":n[0]||(n[0]=r=>e.params.username=r),label:a.$t("username")},null,8,["modelValue","label"]),o(_,{class:"fg-main q-mt-md",standout:"bg-main",type:"email",autocomplete:"off",modelValue:e.params.email,"onUpdate:modelValue":n[1]||(n[1]=r=>e.params.email=r),label:a.$t("email")},null,8,["modelValue","label"]),o(_,{class:"fg-main q-mt-md",standout:"bg-main",type:"password","auto-complete":"new-password",modelValue:e.params.passphrase,"onUpdate:modelValue":n[2]||(n[2]=r=>e.params.passphrase=r),label:a.$t("passphrase")},null,8,["modelValue","label"]),o(q,{align:"right"},{default:K(()=>[o(O,{onClick:e.generateNewGpgKeys,flat:"",color:"black",class:"full-width q-mt-md",label:a.$t("generate")},null,8,["label"])]),_:1})])]),_:1})}const te=v($,[["render",ee],["__file","EncryptionKeysForm.vue"]]),ne=G({__name:"EncryptionSettingsPage",setup(a,{expose:n}){n();const{config:t}=M(),e=Q(),s=async()=>{e.changeEncryptionType()},i=k(),r=async()=>{i.open(te,{title:"generate new GPG keys"})},y=t.encryption.type,l=async()=>{const m=await w();t.encryption.privateKey=await m.text()},p=async()=>{const m=await w();t.encryption.publicKey=await m.text()};U(async()=>{t.encryption?.type!==y&&await s()});const u=R(t.encryption,{configScheme:D,includeKeys:["type"]}),f=[{reactivePath:t.encryption,reactiveKey:"password",label:"encryption password",type:"text"}],E=[{type:"textarea",reactivePath:t.encryption,reactiveKey:"publicKey"},{label:"upload public key",type:"action",handler:p,color:d("blue")}],S=[{type:"textarea",reactivePath:t.encryption,reactiveKey:"privateKey"},{label:"upload private key",type:"action",handler:l,color:d("blue")}],I=[{label:"encrypt and sync existing notes",color:d("red"),handler:s}],N=[{label:"private key passphrase (optional)",type:"text",reactivePath:t.encryption,reactiveKey:"privateKeyPassphrase"}],x=[{label:"generate new GPG keys",color:d("red"),handler:r}],h={config:t,encryptionStore:e,encryptExistingNotes:s,modalStore:i,generateNewGpgKeys:r,initialType:y,uploadPrivateKey:l,uploadPublicKey:p,encryptionMenuItems:u,passwordEncryptionMenuItems:f,gpgEncryptionPublicKeyMenuItems:E,gpgEncryptionPrivateKeyMenuItems:S,encryptionActionsMenuitems:I,gpgEncryptionPrivateKeyPassphraseMenuItems:N,gpgNewKeysMenuItems:x,NavigationPage:z,MenuGroup:j,TheDescription:H};return Object.defineProperty(h,"__isScriptSetup",{enumerable:!1,value:!0}),h}});function ae(a,n,t,e,s,i){return c(),g(e.NavigationPage,null,{default:K(()=>[o(e.MenuGroup,{title:"encryption type",items:e.encryptionMenuItems},null,8,["items"]),e.config.encryption.type==="gpgPassword"?(c(),g(e.MenuGroup,{key:0,title:"credentials",items:e.passwordEncryptionMenuItems})):b("",!0),e.config.encryption.type==="gpgKeys"?(c(),P(Y,{key:1},[o(e.MenuGroup,{title:"GPG public key",items:e.gpgEncryptionPublicKeyMenuItems}),o(e.MenuGroup,{title:"GPG private key",items:e.gpgEncryptionPrivateKeyMenuItems}),o(e.MenuGroup,{title:"GPG private key",items:e.gpgEncryptionPrivateKeyPassphraseMenuItems}),o(e.MenuGroup,{title:"Encrypt existing notes",items:e.gpgNewKeysMenuItems}),o(e.TheDescription,{text:"be careful, the old encryption keys will be lost. Third-party clients will need to update encryption keys."})],64)):b("",!0),e.config.encryption.type!=="disabled"?(c(),g(e.MenuGroup,{key:2,items:e.encryptionActionsMenuitems})):b("",!0)]),_:1})}const ie=v(ne,[["render",ae],["__file","EncryptionSettingsPage.vue"]]);export{ie as default};
